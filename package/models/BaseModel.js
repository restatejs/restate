!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Restate=t():(e.Restate=e.Restate||{},e.Restate.baseModel=t())}(this,(()=>(()=>{"use strict";var e={93:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreModel=void 0;t.CoreModel=class{constructor(e,t){if(this.$resourceName=e,this.$restate=t,t.has(e))throw new Error(`RESTATE ERROR: there is already a Model that the resource name is '${e}'.`);t.set(e,this),this.$httpClient=t.httpClient,t.store.has(e)?this.$resource=t.store.get(e):this.$resource=t.store.add(e)}}}},t={};function r(s){var o=t[s];if(void 0!==o)return o.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,r),i.exports}var s={};return(()=>{var e=s;Object.defineProperty(e,"__esModule",{value:!0}),e.BaseModel=void 0;const t=r(93);function o(e,t,r){let s=e.replace(/(\/:\w+)/g,(e=>{const r=e.slice(2);if(!t[r])throw new Error;return`/${t[r]}`}));return r&&(s+=`?${new URLSearchParams(r)}`),s}class i extends t.CoreModel{constructor(e,t){super(e,t),this.$resourceName=e,this.$restate=t,this.$pk="id"}async index(e){const t=o("/:resourceName",{resourceName:this.$resourceName},e?.query),r=await this.$httpClient.get(t);return!0!==e?.merge&&this.$resource.clear(),r.forEach((e=>this.$resource.set(e[this.$pk],e))),this.$resource.getAll()}async show(e,t){const r=o("/:resourceName/:id",{resourceName:this.$resourceName,id:e},t?.query),s=await this.$httpClient.get(r);return this.$resource.set(s[this.$pk],s),this.$resource.get(e)}async store(e,t){const r=o("/:resourceName",{resourceName:this.$resourceName},t?.query),s=await this.$httpClient.post(r,e);return this.$resource.set(s[this.$pk],s),!0}async update(e,t,r){const s=o("/:resourceName/:id",{resourceName:this.$resourceName,id:e},r?.query);return await this.$httpClient.put(s,t),Object.entries(t).forEach((([t,r])=>this.$resource.setProperty(e,t,r))),!0}async destroy(e,t){const r=o("/:resourceName/:id",{resourceName:this.$resourceName,id:e},t?.query);return await this.$httpClient.delete(r),this.$resource.delete(e),!0}}e.BaseModel=i})(),s})()));